{
    "sourceFile": "js/script.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1639110074774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1639112654138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,22 @@\n }\n \n let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n \n-\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 5,\n+      center: middle,\n+    });\n+  \n+    // This event listener calls addMarker() when the map is clicked.\n+    google.maps.event.addListener(map, \"click\", (evt) => {\n+      addMarker(evt.latLng, map);\n+    });\n+    \n+  }\n+  \n // input \n // accept click from map \n     // criteria:\n     // accepted date \n"
                },
                {
                    "date": 1639112720336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,11 @@\n       center: middle,\n     });\n   \n     // This event listener calls addMarker() when the map is clicked.\n-    google.maps.event.addListener(map, \"click\", (evt) => {\n-      addMarker(evt.latLng, map);\n-    });\n+    // google.maps.event.addListener(map, \"click\", (evt) => {\n+    //   addMarker(evt.latLng, map);\n+    // });\n     \n   }\n   \n // input \n"
                },
                {
                    "date": 1639113865441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,13 @@\n       zoom: 5,\n       center: middle,\n     });\n   \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });  \n     // This event listener calls addMarker() when the map is clicked.\n     // google.maps.event.addListener(map, \"click\", (evt) => {\n     //   addMarker(evt.latLng, map);\n     // });\n"
                },
                {
                    "date": 1639114001731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,10 @@\n     for ( i = 0 ; i < sixCities.length ; i++ ) {\n         new google.maps.Marker({\n           position: sixCities[i].latLong,\n           map: map,\n-        });  \n+        });\n+    }      \n     // This event listener calls addMarker() when the map is clicked.\n     // google.maps.event.addListener(map, \"click\", (evt) => {\n     //   addMarker(evt.latLng, map);\n     // });\n"
                },
                {
                    "date": 1639163627428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+// weather forecast call\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\"\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\"\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\"\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\"\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\"\n+}\n+\n+let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 5,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    // google.maps.event.addListener(map, \"click\", (evt) => {\n+    //   addMarker(evt.latLng, map);\n+    // });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+    \n+  }\n+  \n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+// compare criteria to the weather\n+    // what's closest?\n+    // distance()\n+    // weather \n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639164672898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+// weather forecast call\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 5,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    // google.maps.event.addListener(map, \"click\", (evt) => {\n+    //   addMarker(evt.latLng, map);\n+    // });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+    \n+  }\n+  \n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+// compare criteria to the weather\n+    // what's closest?\n+    // distance()\n+    // weather \n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639165216787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+// weather forecast call\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+var startLocation = {\n+    latLong: { lat: \"\", lng: \"\" },\n+}\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 5,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    // google.maps.event.addListener(map, \"click\", (evt) => {\n+    //   addMarker(evt.latLng, map);\n+    // });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+    \n+  }\n+  \n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+// compare criteria to the weather\n+    // what's closest?\n+    // distance()\n+    // weather \n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639166909776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+// weather forecast call\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+var startLocation = {\n+    latLong: { lat: \"\", lng: \"\" },\n+}\n+\n+var cityIndexByDistanceArray = []\n+var cityIndexByTemperatureArray = []\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 5,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    // google.maps.event.addListener(map, \"click\", (evt) => {\n+    //   addMarker(evt.latLng, map);\n+    // });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+    \n+  }\n+  \n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+// compare criteria to the weather\n+    // what's closest?\n+    // distance()\n+    // weather \n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639167601647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+// weather forecast call\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+var startLocation = {\n+    latLong: { lat: \"\", lng: \"\" },\n+}\n+\n+var cityIndexByDistanceArray = []\n+var cityIndexByTemperatureArray = []\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 5,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    // google.maps.event.addListener(map, \"click\", (evt) => {\n+    //   addMarker(evt.latLng, map);\n+    // });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+    \n+  }\n+  \n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+// compare criteria to the weather\n+    // what's closest?\n+    // distance()\n+    // weather \n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n+\n+\n+\n+// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n+                    //user opens page\n+                    //step 1: enter current location, this brings up a modal for step 2\n+                    //step 2: enter date and minimum temperature desired\n+                    //webpage shows:\n+                        // - how many cities are forecasted to meet the weather criteria on the entered date\n+                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n+                        // - offer to run another query\n"
                }
            ],
            "date": 1639110074774,
            "name": "Commit-0",
            "content": "// weather forecast call\nvar APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n\n\nvar sanFrancisco = {\n    name: \"San Francisco\",\n    latLong: { lat: 37.76, lng: -122.45 },\n    temp: \"\",\n};\n\nlet saltLakeCity = {\n    name: \"Salt Lake City\",\n    latLong: { lat: 40.77, lng: -111.92 },\n    temp: \"\"\n}\n\nlet sanAntonio = {\n    name: \"San Antonio\",\n    latLong: { lat: 29.46, lng: -98.57 },\n    temp: \"\"\n}\n\nlet newYork = {\n    name: \"New York City\",\n    latLong: { lat: 40.76, lng: -74.00 },\n    temp: \"\"\n}\n\nlet miami = {\n    name: \"Miami\",\n    latLong: { lat: 27.77, lng: -80.22 },\n    temp: \"\"\n}\n\nlet lasVegas = {\n    name: \"Las Vegas\",\n    latLong: { lat: 36.14, lng: -115.20 },\n    temp: \"\"\n}\n\nlet sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n\n\n// input \n// accept click from map \n    // criteria:\n    // accepted date \n    // accepted minimum temperature\n    // modal (box on page?)\n\n\n// weather \n    // cities into array -- \n        // name: San Francisco,\n            // longitude: \"\",\n            // latitude: \"\",\n        // Salt Late City\n        // San Antonio\n        // New York\n        // Miami \n        // Las Vegas \n\n\n// local storage\n    // what is stored / what does it look like?\n        // travel date / temperature (?) / current date of search (?)\n\n// compare criteria to the weather\n    // what's closest?\n    // distance()\n    // weather \n\n// display all(?) data for user to compare / select \n    // highlight(?) recommended city?\n    // de-emphasize non-recommended "
        }
    ]
}