{
    "sourceFile": "js/script.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 26,
            "patches": [
                {
                    "date": 1639110074774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1639112654138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,22 @@\n }\n \n let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n \n-\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 5,\n+      center: middle,\n+    });\n+  \n+    // This event listener calls addMarker() when the map is clicked.\n+    google.maps.event.addListener(map, \"click\", (evt) => {\n+      addMarker(evt.latLng, map);\n+    });\n+    \n+  }\n+  \n // input \n // accept click from map \n     // criteria:\n     // accepted date \n"
                },
                {
                    "date": 1639112720336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,11 @@\n       center: middle,\n     });\n   \n     // This event listener calls addMarker() when the map is clicked.\n-    google.maps.event.addListener(map, \"click\", (evt) => {\n-      addMarker(evt.latLng, map);\n-    });\n+    // google.maps.event.addListener(map, \"click\", (evt) => {\n+    //   addMarker(evt.latLng, map);\n+    // });\n     \n   }\n   \n // input \n"
                },
                {
                    "date": 1639113865441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,13 @@\n       zoom: 5,\n       center: middle,\n     });\n   \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });  \n     // This event listener calls addMarker() when the map is clicked.\n     // google.maps.event.addListener(map, \"click\", (evt) => {\n     //   addMarker(evt.latLng, map);\n     // });\n"
                },
                {
                    "date": 1639114001731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,10 @@\n     for ( i = 0 ; i < sixCities.length ; i++ ) {\n         new google.maps.Marker({\n           position: sixCities[i].latLong,\n           map: map,\n-        });  \n+        });\n+    }      \n     // This event listener calls addMarker() when the map is clicked.\n     // google.maps.event.addListener(map, \"click\", (evt) => {\n     //   addMarker(evt.latLng, map);\n     // });\n"
                },
                {
                    "date": 1639163627428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+// weather forecast call\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\"\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\"\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\"\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\"\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\"\n+}\n+\n+let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 5,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    // google.maps.event.addListener(map, \"click\", (evt) => {\n+    //   addMarker(evt.latLng, map);\n+    // });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+    \n+  }\n+  \n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+// compare criteria to the weather\n+    // what's closest?\n+    // distance()\n+    // weather \n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639164672898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+// weather forecast call\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 5,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    // google.maps.event.addListener(map, \"click\", (evt) => {\n+    //   addMarker(evt.latLng, map);\n+    // });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+    \n+  }\n+  \n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+// compare criteria to the weather\n+    // what's closest?\n+    // distance()\n+    // weather \n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639165216787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+// weather forecast call\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+var startLocation = {\n+    latLong: { lat: \"\", lng: \"\" },\n+}\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 5,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    // google.maps.event.addListener(map, \"click\", (evt) => {\n+    //   addMarker(evt.latLng, map);\n+    // });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+    \n+  }\n+  \n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+// compare criteria to the weather\n+    // what's closest?\n+    // distance()\n+    // weather \n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639166909776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+// weather forecast call\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\"\n+    distance: \"\",\n+}\n+\n+let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+var startLocation = {\n+    latLong: { lat: \"\", lng: \"\" },\n+}\n+\n+var cityIndexByDistanceArray = []\n+var cityIndexByTemperatureArray = []\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 5,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    // google.maps.event.addListener(map, \"click\", (evt) => {\n+    //   addMarker(evt.latLng, map);\n+    // });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+    \n+  }\n+  \n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+// compare criteria to the weather\n+    // what's closest?\n+    // distance()\n+    // weather \n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639167601647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+// weather forecast call\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+var startLocation = {\n+    latLong: { lat: \"\", lng: \"\" },\n+}\n+\n+var cityIndexByDistanceArray = []\n+var cityIndexByTemperatureArray = []\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 5,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    // google.maps.event.addListener(map, \"click\", (evt) => {\n+    //   addMarker(evt.latLng, map);\n+    // });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+    \n+  }\n+  \n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+// compare criteria to the weather\n+    // what's closest?\n+    // distance()\n+    // weather \n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n+\n+\n+\n+// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n+                    //user opens page\n+                    //step 1: enter current location, this brings up a modal for step 2\n+                    //step 2: enter date and minimum temperature desired\n+                    //webpage shows:\n+                        // - how many cities are forecasted to meet the weather criteria on the entered date\n+                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n+                        // - offer to run another query\n"
                },
                {
                    "date": 1639237909751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,12 @@\n-// weather forecast call\n-var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n-//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n+var letsGoBtnEl = $(\"#lets-go-btn\")\n+var yourCityEl = $(\"#your-city\")\n+var yourDateEl = $(\"#your-date\")\n+var tempEl = $(\"#temp\")\n \n \n+\n+\n var sanFrancisco = {\n     name: \"San Francisco\",\n     latLong: { lat: 37.76, lng: -122.45 },\n     temp: \"\",\n@@ -44,123 +47,79 @@\n     temp: \"\",\n     distance: \"\",\n }\n \n-let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+var sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n \n-var startLocation = {\n-    latLong: { lat: \"\", lng: \"\" },\n-}\n+// weather forecast call to get 8-day forecast for sixCities array\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+for (var i = 0; i < sixCities.length; i++) {\n+    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + sixCities[i] + \"&appid=\" + APIKey;\n+    fetch(forecast).then(function (response) {\n+        if (response.ok) {\n+            response.json()\n+                .then(function (data) {\n+                    //console.log(data)\n+                    //loop thru day1 to day 8 of forecast\n+                    for (var i = 0; i < 7; i++) {\n+                        //date\n+                        var forecastDay = data.list[i * 8]  //data given in 3hrs,multiply by 8 to get 24 hrs\n+                        var date = new Date(parseInt(forecastDay.dt) * 1000)\n+                        var formatDate = moment(date).format(\"MMM D, YYYY\")\n+                        console.log(forecastDay.dt, \"forecastDay\" + i, date, formatDate)\n \n-var cityIndexByDistanceArray = []\n-var cityIndexByTemperatureArray = []\n+                        //temp\n+                        var temp = Math.round((forecastDay.main.temp - 273.15) * 1.80 + 32);\n+                        console.log(temp)\n \n-function initMap() {\n-    const middle = { lat: 41, lng: -98 };\n-    const map = new google.maps.Map(document.getElementById(\"map\"), {\n-      zoom: 5,\n-      center: middle,\n-    });\n-  \n-    for ( i = 0 ; i < sixCities.length ; i++ ) {\n-        new google.maps.Marker({\n-          position: sixCities[i].latLong,\n-          map: map,\n-        });\n-    }      \n-    // This event listener calls addMarker() when the map is clicked.\n-    // google.maps.event.addListener(map, \"click\", (evt) => {\n-    //   addMarker(evt.latLng, map);\n-    // });\n-    // ~~~ keep this event listener, but turn it off after the user clicks the map\n-    \n-  }\n-  \n-// input \n-// accept click from map \n-    // criteria:\n-    // accepted date \n-        // set up calendar input?\n-        // easier to offer dates?\n-    // accepted minimum temperature\n-    // modal (box on page?)\n+                    }\n+                })\n+        }\n+    })\n \n+}\n \n-// weather \n-    // get weather for each city on the specified date\n-\n-\n-// local storage\n-    // what is stored / what does it look like?\n-        // travel date / temperature (?) / current date of search (?)\n-\n // compare criteria to the weather\n-    // what's closest?\n-    // distance()\n-    // weather \n+//1. what's closest? yourCityEl input compared to sixCities array which contains lon/lat info\n+// get a diff API call to get distance and then sort closest to furthest\n+function getDistance(yourCityEl) {\n \n-// display all(?) data for user to compare / select \n-    // highlight(?) recommended city?\n-    // de-emphasize non-recommended \n+    // query url to make the API call \n+    var queryURL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + yourCityEl + \"&appid=\" + APIKey;\n \n+    // make a get request to url\n+    fetch(queryURL)\n+        .then(function (response) {\n+            //request successful\n+            if (response.ok) {\n \n+                response.json().then(function (data) {\n+                    //console.log(data)\n+                    // get date using moment js\n+                    var date = moment().format(\" MM/DD/YYYY\");\n+                    console.log(date)\n \n-// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n-                    //user opens page\n-                    //step 1: enter current location, this brings up a modal for step 2\n-                    //step 2: enter date and minimum temperature desired\n-                    //webpage shows:\n-                        // - how many cities are forecasted to meet the weather criteria on the entered date\n-                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n-                        // - offer to run another query\n-// weather forecast call\n-var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n-//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n+                    // temp in degreeF\n+                    var temp = Math.round((data.main.temp - 273.15) * 1.80 + 32);\n+                    console.log(temp)\n \n+                    // lat and lon\n+                    var lat = data.coord.lat;\n+                    var lon = data.coord.lon;\n+                    console.log(lat, lon)\n+                })\n+            }\n \n-var sanFrancisco = {\n-    name: \"San Francisco\",\n-    latLong: { lat: 37.76, lng: -122.45 },\n-    temp: \"\",\n-    distance: \"\",\n-};\n+        })\n \n-let saltLakeCity = {\n-    name: \"Salt Lake City\",\n-    latLong: { lat: 40.77, lng: -111.92 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n \n-let sanAntonio = {\n-    name: \"San Antonio\",\n-    latLong: { lat: 29.46, lng: -98.57 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n \n-let newYork = {\n-    name: \"New York City\",\n-    latLong: { lat: 40.76, lng: -74.00 },\n-    temp: \"\"\n-    distance: \"\",\n }\n \n-let miami = {\n-    name: \"Miami\",\n-    latLong: { lat: 27.77, lng: -80.22 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n+    //2. weather criteria > 80degrees\n+    // function to see if temp in each city is greater than 80, if yes, have different background or some marker\n \n-let lasVegas = {\n-    name: \"Las Vegas\",\n-    latLong: { lat: 36.14, lng: -115.20 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n \n-let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n \n var startLocation = {\n     latLong: { lat: \"\", lng: \"\" },\n }\n@@ -198,401 +157,30 @@\n     // accepted minimum temperature\n     // modal (box on page?)\n \n \n-// weather \n-    // get weather for each city on the specified date\n \n \n-// local storage\n-    // what is stored / what does it look like?\n-        // travel date / temperature (?) / current date of search (?)\n-\n-// compare criteria to the weather\n-    // what's closest?\n-    // distance()\n-    // weather \n-\n-// display all(?) data for user to compare / select \n-    // highlight(?) recommended city?\n-    // de-emphasize non-recommended \n-// weather forecast call\n-var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n-//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n-\n-\n-var sanFrancisco = {\n-    name: \"San Francisco\",\n-    latLong: { lat: 37.76, lng: -122.45 },\n-    temp: \"\",\n-    distance: \"\",\n-};\n-\n-let saltLakeCity = {\n-    name: \"Salt Lake City\",\n-    latLong: { lat: 40.77, lng: -111.92 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n-\n-let sanAntonio = {\n-    name: \"San Antonio\",\n-    latLong: { lat: 29.46, lng: -98.57 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n-\n-let newYork = {\n-    name: \"New York City\",\n-    latLong: { lat: 40.76, lng: -74.00 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n-\n-let miami = {\n-    name: \"Miami\",\n-    latLong: { lat: 27.77, lng: -80.22 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n-\n-let lasVegas = {\n-    name: \"Las Vegas\",\n-    latLong: { lat: 36.14, lng: -115.20 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n-\n-let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n-\n-var startLocation = {\n-    latLong: { lat: \"\", lng: \"\" },\n-}\n-\n-function initMap() {\n-    const middle = { lat: 41, lng: -98 };\n-    const map = new google.maps.Map(document.getElementById(\"map\"), {\n-      zoom: 5,\n-      center: middle,\n-    });\n-  \n-    for ( i = 0 ; i < sixCities.length ; i++ ) {\n-        new google.maps.Marker({\n-          position: sixCities[i].latLong,\n-          map: map,\n-        });\n-    }      \n-    // This event listener calls addMarker() when the map is clicked.\n-    // google.maps.event.addListener(map, \"click\", (evt) => {\n-    //   addMarker(evt.latLng, map);\n-    // });\n-    // ~~~ keep this event listener, but turn it off after the user clicks the map\n-    \n-  }\n-  \n-// input \n-// accept click from map \n-    // criteria:\n-    // accepted date \n-        // set up calendar input?\n-        // easier to offer dates?\n-    // accepted minimum temperature\n-    // modal (box on page?)\n-\n-\n // weather \n     // get weather for each city on the specified date\n \n \n // local storage\n     // what is stored / what does it look like?\n         // travel date / temperature (?) / current date of search (?)\n \n-// compare criteria to the weather\n-    // what's closest?\n-    // distance()\n-    // weather \n \n-// display all(?) data for user to compare / select \n-    // highlight(?) recommended city?\n-    // de-emphasize non-recommended \n-// weather forecast call\n-var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n-//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n \n-\n-var sanFrancisco = {\n-    name: \"San Francisco\",\n-    latLong: { lat: 37.76, lng: -122.45 },\n-    temp: \"\",\n-    distance: \"\",\n-};\n-\n-let saltLakeCity = {\n-    name: \"Salt Lake City\",\n-    latLong: { lat: 40.77, lng: -111.92 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n-\n-let sanAntonio = {\n-    name: \"San Antonio\",\n-    latLong: { lat: 29.46, lng: -98.57 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n-\n-let newYork = {\n-    name: \"New York City\",\n-    latLong: { lat: 40.76, lng: -74.00 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n-\n-let miami = {\n-    name: \"Miami\",\n-    latLong: { lat: 27.77, lng: -80.22 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n-\n-let lasVegas = {\n-    name: \"Las Vegas\",\n-    latLong: { lat: 36.14, lng: -115.20 },\n-    temp: \"\"\n-    distance: \"\",\n-}\n-\n-let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n-\n-function initMap() {\n-    const middle = { lat: 41, lng: -98 };\n-    const map = new google.maps.Map(document.getElementById(\"map\"), {\n-      zoom: 5,\n-      center: middle,\n-    });\n-  \n-    for ( i = 0 ; i < sixCities.length ; i++ ) {\n-        new google.maps.Marker({\n-          position: sixCities[i].latLong,\n-          map: map,\n-        });\n-    }      \n-    // This event listener calls addMarker() when the map is clicked.\n-    // google.maps.event.addListener(map, \"click\", (evt) => {\n-    //   addMarker(evt.latLng, map);\n-    // });\n-    // ~~~ keep this event listener, but turn it off after the user clicks the map\n-    \n-  }\n-  \n-// input \n-// accept click from map \n-    // criteria:\n-    // accepted date \n-        // set up calendar input?\n-        // easier to offer dates?\n-    // accepted minimum temperature\n-    // modal (box on page?)\n-\n-\n-// weather \n-    // get weather for each city on the specified date\n-\n-\n-// local storage\n-    // what is stored / what does it look like?\n-        // travel date / temperature (?) / current date of search (?)\n-\n-// compare criteria to the weather\n-    // what's closest?\n-    // distance()\n-    // weather \n-\n // display all(?) data for user to compare / select \n     // highlight(?) recommended city?\n     // de-emphasize non-recommended \n-// weather forecast call\n-var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n-//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n \n \n-var sanFrancisco = {\n-    name: \"San Francisco\",\n-    latLong: { lat: 37.76, lng: -122.45 },\n-    temp: \"\",\n-};\n \n-let saltLakeCity = {\n-    name: \"Salt Lake City\",\n-    latLong: { lat: 40.77, lng: -111.92 },\n-    temp: \"\"\n-}\n-\n-let sanAntonio = {\n-    name: \"San Antonio\",\n-    latLong: { lat: 29.46, lng: -98.57 },\n-    temp: \"\"\n-}\n-\n-let newYork = {\n-    name: \"New York City\",\n-    latLong: { lat: 40.76, lng: -74.00 },\n-    temp: \"\"\n-}\n-\n-let miami = {\n-    name: \"Miami\",\n-    latLong: { lat: 27.77, lng: -80.22 },\n-    temp: \"\"\n-}\n-\n-let lasVegas = {\n-    name: \"Las Vegas\",\n-    latLong: { lat: 36.14, lng: -115.20 },\n-    temp: \"\"\n-}\n-\n-let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n-\n-function initMap() {\n-    const middle = { lat: 41, lng: -98 };\n-    const map = new google.maps.Map(document.getElementById(\"map\"), {\n-      zoom: 5,\n-      center: middle,\n-    });\n-  \n-    for ( i = 0 ; i < sixCities.length ; i++ ) {\n-        new google.maps.Marker({\n-          position: sixCities[i].latLong,\n-          map: map,\n-        });\n-    }      \n-    // This event listener calls addMarker() when the map is clicked.\n-    // google.maps.event.addListener(map, \"click\", (evt) => {\n-    //   addMarker(evt.latLng, map);\n-    // });\n-    // ~~~ keep this event listener, but turn it off after the user clicks the map\n-    \n-  }\n-  \n-// input \n-// accept click from map \n-    // criteria:\n-    // accepted date \n-        // set up calendar input?\n-        // easier to offer dates?\n-    // accepted minimum temperature\n-    // modal (box on page?)\n-\n-\n-// weather \n-    // get weather for each city on the specified date\n-\n-\n-// local storage\n-    // what is stored / what does it look like?\n-        // travel date / temperature (?) / current date of search (?)\n-\n-// compare criteria to the weather\n-    // what's closest?\n-    // distance()\n-    // weather \n-\n-// display all(?) data for user to compare / select \n-    // highlight(?) recommended city?\n-    // de-emphasize non-recommended \n-// weather forecast call\n-var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n-//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n-\n-\n-var sanFrancisco = {\n-    name: \"San Francisco\",\n-    latLong: { lat: 37.76, lng: -122.45 },\n-    temp: \"\",\n-};\n-\n-let saltLakeCity = {\n-    name: \"Salt Lake City\",\n-    latLong: { lat: 40.77, lng: -111.92 },\n-    temp: \"\"\n-}\n-\n-let sanAntonio = {\n-    name: \"San Antonio\",\n-    latLong: { lat: 29.46, lng: -98.57 },\n-    temp: \"\"\n-}\n-\n-let newYork = {\n-    name: \"New York City\",\n-    latLong: { lat: 40.76, lng: -74.00 },\n-    temp: \"\"\n-}\n-\n-let miami = {\n-    name: \"Miami\",\n-    latLong: { lat: 27.77, lng: -80.22 },\n-    temp: \"\"\n-}\n-\n-let lasVegas = {\n-    name: \"Las Vegas\",\n-    latLong: { lat: 36.14, lng: -115.20 },\n-    temp: \"\"\n-}\n-\n-let sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n-\n-function initMap() {\n-    const middle = { lat: 41, lng: -98 };\n-    const map = new google.maps.Map(document.getElementById(\"map\"), {\n-      zoom: 5,\n-      center: middle,\n-    });\n-  \n-    for ( i = 0 ; i < sixCities.length ; i++ ) {\n-        new google.maps.Marker({\n-          position: sixCities[i].latLong,\n-          map: map,\n-        });\n-    }      \n-    // This event listener calls addMarker() when the map is clicked.\n-    // google.maps.event.addListener(map, \"click\", (evt) => {\n-    //   addMarker(evt.latLng, map);\n-    // });\n-    \n-  }\n-  \n-// input \n-// accept click from map \n-    // criteria:\n-    // accepted date \n-    // accepted minimum temperature\n-    // modal (box on page?)\n-\n-\n-// weather \n-    // cities into array -- \n-        // name: San Francisco,\n-            // longitude: \"\",\n-            // latitude: \"\",\n-        // Salt Late City\n-        // San Antonio\n-        // New York\n-        // Miami \n-        // Las Vegas \n-\n-\n-// local storage\n-    // what is stored / what does it look like?\n-        // travel date / temperature (?) / current date of search (?)\n-\n-// compare criteria to the weather\n-    // what's closest?\n-    // distance()\n-    // weather \n-\n-// display all(?) data for user to compare / select \n-    // highlight(?) recommended city?\n-    // de-emphasize non-recommended \n\\ No newline at end of file\n+// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n+                    //user opens page\n+                    //step 1: enter current location, this brings up a modal for step 2\n+                    //step 2: enter date and minimum temperature desired\n+                    //webpage shows:\n+                        // - how many cities are forecasted to meet the weather criteria on the entered date\n+                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n+                        // - offer to run another query\n"
                },
                {
                    "date": 1639238311421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n \n function initMap() {\n     const middle = { lat: 41, lng: -98 };\n     const map = new google.maps.Map(document.getElementById(\"map\"), {\n-      zoom: 5,\n+      zoom: 4,\n       center: middle,\n     });\n   \n     for ( i = 0 ; i < sixCities.length ; i++ ) {\n"
                },
                {
                    "date": 1639238665583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n-var letsGoBtnEl = $(\"#lets-go-btn\")\n-var yourCityEl = $(\"#your-city\")\n-var yourDateEl = $(\"#your-date\")\n-var tempEl = $(\"#temp\")\n+// var letsGoBtnEl = $(\"#lets-go-btn\")\n+// var yourCityEl = $(\"#your-city\")\n+// var yourDateEl = $(\"#your-date\")\n+// var tempEl = $(\"#temp\")\n \n \n \n \n"
                },
                {
                    "date": 1639238764232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n+\n // var letsGoBtnEl = $(\"#lets-go-btn\")\n-// var yourCityEl = $(\"#your-city\")\n-// var yourDateEl = $(\"#your-date\")\n-// var tempEl = $(\"#temp\")\n+var yourCityEl = $(\"#your-city\")\n+var yourDateEl = $(\"#your-date\")\n+var tempEl = $(\"#temp\")\n \n \n \n \n"
                },
                {
                    "date": 1639238826630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n-\n+// SR: I commented these out because they were throwing an error which was causing the map to not load properly\n // var letsGoBtnEl = $(\"#lets-go-btn\")\n-var yourCityEl = $(\"#your-city\")\n-var yourDateEl = $(\"#your-date\")\n-var tempEl = $(\"#temp\")\n+// var yourCityEl = $(\"#your-city\")\n+// var yourDateEl = $(\"#your-date\")\n+// var tempEl = $(\"#temp\")\n \n \n \n \n"
                },
                {
                    "date": 1639320079513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+// SR: I commented these out because they were throwing an error which was causing the map to not load properly\n+// var letsGoBtnEl = $(\"#lets-go-btn\")\n+// var yourCityEl = $(\"#your-city\")\n+// var yourDateEl = $(\"#your-date\")\n+// var tempEl = $(\"#temp\")\n+\n+\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+var sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+// weather forecast call to get 8-day forecast for sixCities array\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+for (var i = 0; i < sixCities.length; i++) {\n+    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + sixCities[i] + \"&appid=\" + APIKey;\n+    fetch(forecast).then(function (response) {\n+        if (response.ok) {\n+            response.json()\n+                .then(function (data) {\n+                    //console.log(data)\n+                    //loop thru day1 to day 8 of forecast\n+                    for (var i = 0; i < 7; i++) {\n+                        //date\n+                        var forecastDay = data.list[i * 8]  //data given in 3hrs,multiply by 8 to get 24 hrs\n+                        var date = new Date(parseInt(forecastDay.dt) * 1000)\n+                        var formatDate = moment(date).format(\"MMM D, YYYY\")\n+                        console.log(forecastDay.dt, \"forecastDay\" + i, date, formatDate)\n+\n+                        //temp\n+                        var temp = Math.round((forecastDay.main.temp - 273.15) * 1.80 + 32);\n+                        console.log(temp)\n+\n+                    }\n+                })\n+        }\n+    })\n+\n+}\n+\n+// compare criteria to the weather\n+//1. what's closest? yourCityEl input compared to sixCities array which contains lon/lat info\n+// get a diff API call to get distance and then sort closest to furthest\n+function getDistance(yourCityEl) {\n+\n+    // query url to make the API call \n+    var queryURL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + yourCityEl + \"&appid=\" + APIKey;\n+\n+    // make a get request to url\n+    fetch(queryURL)\n+        .then(function (response) {\n+            //request successful\n+            if (response.ok) {\n+\n+                response.json().then(function (data) {\n+                    //console.log(data)\n+                    // get date using moment js\n+                    var date = moment().format(\" MM/DD/YYYY\");\n+                    console.log(date)\n+\n+                    // temp in degreeF\n+                    var temp = Math.round((data.main.temp - 273.15) * 1.80 + 32);\n+                    console.log(temp)\n+\n+                    // lat and lon\n+                    var lat = data.coord.lat;\n+                    var lon = data.coord.lon;\n+                    console.log(lat, lon)\n+                })\n+            }\n+\n+        })\n+\n+\n+\n+}\n+\n+    //2. weather criteria > 80degrees\n+    // function to see if temp in each city is greater than 80, if yes, have different background or some marker\n+\n+\n+\n+var startLocation = {\n+    latLong: { lat: \"\", lng: \"\" },\n+}\n+\n+var cityIndexByDistanceArray = []\n+var cityIndexByTemperatureArray = []\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 4,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    google.maps.event.addListener(map, \"click\", (evt) => {\n+      addMarker(evt.latLng, map);\n+    });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+    \n+}\n+\n+// Adds a marker to the map.\n+function addMarker(location, map) {\n+    // Add the marker at the clicked location, and add the next-available label\n+    // from the array of alphabetical characters.\n+    new google.maps.Marker({\n+      position: location,\n+      label: \"A\",\n+      map: map,\n+    });\n+  }  \n+\n+\n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+\n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n+\n+\n+\n+// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n+                    //user opens page\n+                    //step 1: enter current location, this brings up a modal for step 2\n+                    //step 2: enter date and minimum temperature desired\n+                    //webpage shows:\n+                        // - how many cities are forecasted to meet the weather criteria on the entered date\n+                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n+                        // - offer to run another query\n"
                },
                {
                    "date": 1639320633385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,228 @@\n+// SR: I commented these out because they were throwing an error which was causing the map to not load properly\n+// var letsGoBtnEl = $(\"#lets-go-btn\")\n+// var yourCityEl = $(\"#your-city\")\n+// var yourDateEl = $(\"#your-date\")\n+// var tempEl = $(\"#temp\")\n+\n+\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+var sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+// weather forecast call to get 8-day forecast for sixCities array\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+for (var i = 0; i < sixCities.length; i++) {\n+    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + sixCities[i] + \"&appid=\" + APIKey;\n+    fetch(forecast).then(function (response) {\n+        if (response.ok) {\n+            response.json()\n+                .then(function (data) {\n+                    //console.log(data)\n+                    //loop thru day1 to day 8 of forecast\n+                    for (var i = 0; i < 7; i++) {\n+                        //date\n+                        var forecastDay = data.list[i * 8]  //data given in 3hrs,multiply by 8 to get 24 hrs\n+                        var date = new Date(parseInt(forecastDay.dt) * 1000)\n+                        var formatDate = moment(date).format(\"MMM D, YYYY\")\n+                        console.log(forecastDay.dt, \"forecastDay\" + i, date, formatDate)\n+\n+                        //temp\n+                        var temp = Math.round((forecastDay.main.temp - 273.15) * 1.80 + 32);\n+                        console.log(temp)\n+\n+                    }\n+                })\n+        }\n+    })\n+\n+}\n+\n+// compare criteria to the weather\n+//1. what's closest? yourCityEl input compared to sixCities array which contains lon/lat info\n+// get a diff API call to get distance and then sort closest to furthest\n+function getDistance(yourCityEl) {\n+\n+    // query url to make the API call \n+    var queryURL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + yourCityEl + \"&appid=\" + APIKey;\n+\n+    // make a get request to url\n+    fetch(queryURL)\n+        .then(function (response) {\n+            //request successful\n+            if (response.ok) {\n+\n+                response.json().then(function (data) {\n+                    //console.log(data)\n+                    // get date using moment js\n+                    var date = moment().format(\" MM/DD/YYYY\");\n+                    console.log(date)\n+\n+                    // temp in degreeF\n+                    var temp = Math.round((data.main.temp - 273.15) * 1.80 + 32);\n+                    console.log(temp)\n+\n+                    // lat and lon\n+                    var lat = data.coord.lat;\n+                    var lon = data.coord.lon;\n+                    console.log(lat, lon)\n+                })\n+            }\n+\n+        })\n+\n+\n+\n+}\n+\n+    //2. weather criteria > 80degrees\n+    // function to see if temp in each city is greater than 80, if yes, have different background or some marker\n+\n+\n+\n+var startLocation = {\n+    latLong: { lat: \"\", lng: \"\" },\n+}\n+\n+var cityIndexByDistanceArray = []\n+var cityIndexByTemperatureArray = []\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 4,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    google.maps.event.addListener(map, \"click\", (evt) => {\n+      addMarker(evt.latLng, map);\n+    });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+\n+    // initialize services\n+    const geocoder = new google.maps.Geocoder();\n+    const service = new google.maps.DistanceMatrixService();\n+\n+}\n+\n+// Adds a marker to the map.\n+function addMarker(location, map) {\n+    // Add the marker at the clicked location, and add the next-available label\n+    // from the array of alphabetical characters.\n+    new google.maps.Marker({\n+      position: location,\n+      label: \"A\",\n+      map: map,\n+    });\n+  }  \n+\n+// initialize services\n+const geocoder = new google.maps.Geocoder();\n+const service = new google.maps.DistanceMatrixService();\n+// build request\n+const origin1 = { lat: 55.93, lng: -3.118 };\n+const origin2 = \"Greenwich, England\";\n+const destinationA = \"Stockholm, Sweden\";\n+const destinationB = { lat: 50.087, lng: 14.421 };\n+const request = {\n+  origins: [origin1, origin2],\n+  destinations: [destinationA, destinationB],\n+  travelMode: google.maps.TravelMode.DRIVING,\n+  unitSystem: google.maps.UnitSystem.METRIC,\n+  avoidHighways: false,\n+  avoidTolls: false,\n+};\n+\n+// get distance matrix response\n+service.getDistanceMatrix(request).then((response) => {\n+  // put response\n+  document.getElementById(\"response\").innerText = JSON.stringify(\n+    response,\n+    null,\n+    2\n+  );\n+\n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+\n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n+\n+\n+\n+// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n+                    //user opens page\n+                    //step 1: enter current location, this brings up a modal for step 2\n+                    //step 2: enter date and minimum temperature desired\n+                    //webpage shows:\n+                        // - how many cities are forecasted to meet the weather criteria on the entered date\n+                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n+                        // - offer to run another query\n"
                },
                {
                    "date": 1639321666304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+// SR: I commented these out because they were throwing an error which was causing the map to not load properly\n+// var letsGoBtnEl = $(\"#lets-go-btn\")\n+// var yourCityEl = $(\"#your-city\")\n+// var yourDateEl = $(\"#your-date\")\n+// var tempEl = $(\"#temp\")\n+\n+\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+var sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+// weather forecast call to get 8-day forecast for sixCities array\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+for (var i = 0; i < sixCities.length; i++) {\n+    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + sixCities[i] + \"&appid=\" + APIKey;\n+    fetch(forecast).then(function (response) {\n+        if (response.ok) {\n+            response.json()\n+                .then(function (data) {\n+                    //console.log(data)\n+                    //loop thru day1 to day 8 of forecast\n+                    for (var i = 0; i < 7; i++) {\n+                        //date\n+                        var forecastDay = data.list[i * 8]  //data given in 3hrs,multiply by 8 to get 24 hrs\n+                        var date = new Date(parseInt(forecastDay.dt) * 1000)\n+                        var formatDate = moment(date).format(\"MMM D, YYYY\")\n+                        console.log(forecastDay.dt, \"forecastDay\" + i, date, formatDate)\n+\n+                        //temp\n+                        var temp = Math.round((forecastDay.main.temp - 273.15) * 1.80 + 32);\n+                        console.log(temp)\n+\n+                    }\n+                })\n+        }\n+    })\n+\n+}\n+\n+// compare criteria to the weather\n+//1. what's closest? yourCityEl input compared to sixCities array which contains lon/lat info\n+// get a diff API call to get distance and then sort closest to furthest\n+function getDistance(yourCityEl) {\n+\n+    // query url to make the API call \n+    var queryURL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + yourCityEl + \"&appid=\" + APIKey;\n+\n+    // make a get request to url\n+    fetch(queryURL)\n+        .then(function (response) {\n+            //request successful\n+            if (response.ok) {\n+\n+                response.json().then(function (data) {\n+                    //console.log(data)\n+                    // get date using moment js\n+                    var date = moment().format(\" MM/DD/YYYY\");\n+                    console.log(date)\n+\n+                    // temp in degreeF\n+                    var temp = Math.round((data.main.temp - 273.15) * 1.80 + 32);\n+                    console.log(temp)\n+\n+                    // lat and lon\n+                    var lat = data.coord.lat;\n+                    var lon = data.coord.lon;\n+                    console.log(lat, lon)\n+                })\n+            }\n+\n+        })\n+\n+\n+\n+}\n+\n+    //2. weather criteria > 80degrees\n+    // function to see if temp in each city is greater than 80, if yes, have different background or some marker\n+\n+\n+\n+var startLocation = {\n+    latLong: { lat: \"\", lng: \"\" },\n+}\n+\n+var cityIndexByDistanceArray = []\n+var cityIndexByTemperatureArray = []\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 4,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    google.maps.event.addListener(map, \"click\", (evt) => {\n+      addMarker(evt.latLng, map);\n+    });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+\n+    // initialize services\n+    const geocoder = new google.maps.Geocoder();\n+    const service = new google.maps.DistanceMatrixService();\n+\n+}\n+\n+// Adds a marker to the map.\n+function addMarker(location, map) {\n+    // Add the marker at the clicked location, and add the next-available label\n+    // from the array of alphabetical characters.\n+    new google.maps.Marker({\n+      position: location,\n+      label: \"A\",\n+      map: map,\n+    });\n+  }  \n+\n+var getDistance2 = function(){\n+    \n+    // build request\n+    const origin1 = { lat: 55.93, lng: -3.118 };\n+    const origin2 = \"Greenwich, England\";\n+    const destinationA = \"Stockholm, Sweden\";\n+    const destinationB = { lat: 50.087, lng: 14.421 };\n+    const request = {\n+        origins: [origin1, origin2],\n+        destinations: [destinationA, destinationB],\n+        travelMode: google.maps.TravelMode.DRIVING,\n+        unitSystem: google.maps.UnitSystem.METRIC,\n+        avoidHighways: false,\n+        avoidTolls: false,\n+    };\n+    \n+    // get distance matrix response\n+    service.getDistanceMatrix(request).then((response) => {\n+        // put response\n+        console.log(JSON.stringify(\n+            response,\n+            null,\n+            2\n+        ));\n+    })\n+}\n+        \n+\n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+\n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n+\n+\n+\n+// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n+                    //user opens page\n+                    //step 1: enter current location, this brings up a modal for step 2\n+                    //step 2: enter date and minimum temperature desired\n+                    //webpage shows:\n+                        // - how many cities are forecasted to meet the weather criteria on the entered date\n+                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n+                        // - offer to run another query\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639321821460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+// SR: I commented these out because they were throwing an error which was causing the map to not load properly\n+// var letsGoBtnEl = $(\"#lets-go-btn\")\n+// var yourCityEl = $(\"#your-city\")\n+// var yourDateEl = $(\"#your-date\")\n+// var tempEl = $(\"#temp\")\n+\n+\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+var sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+// weather forecast call to get 8-day forecast for sixCities array\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+for (var i = 0; i < sixCities.length; i++) {\n+    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + sixCities[i] + \"&appid=\" + APIKey;\n+    fetch(forecast).then(function (response) {\n+        if (response.ok) {\n+            response.json()\n+                .then(function (data) {\n+                    //console.log(data)\n+                    //loop thru day1 to day 8 of forecast\n+                    for (var i = 0; i < 7; i++) {\n+                        //date\n+                        var forecastDay = data.list[i * 8]  //data given in 3hrs,multiply by 8 to get 24 hrs\n+                        var date = new Date(parseInt(forecastDay.dt) * 1000)\n+                        var formatDate = moment(date).format(\"MMM D, YYYY\")\n+                        console.log(forecastDay.dt, \"forecastDay\" + i, date, formatDate)\n+\n+                        //temp\n+                        var temp = Math.round((forecastDay.main.temp - 273.15) * 1.80 + 32);\n+                        console.log(temp)\n+\n+                    }\n+                })\n+        }\n+    })\n+\n+}\n+\n+// compare criteria to the weather\n+//1. what's closest? yourCityEl input compared to sixCities array which contains lon/lat info\n+// get a diff API call to get distance and then sort closest to furthest\n+function getDistance(yourCityEl) {\n+\n+    // query url to make the API call \n+    var queryURL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + yourCityEl + \"&appid=\" + APIKey;\n+\n+    // make a get request to url\n+    fetch(queryURL)\n+        .then(function (response) {\n+            //request successful\n+            if (response.ok) {\n+\n+                response.json().then(function (data) {\n+                    //console.log(data)\n+                    // get date using moment js\n+                    var date = moment().format(\" MM/DD/YYYY\");\n+                    console.log(date)\n+\n+                    // temp in degreeF\n+                    var temp = Math.round((data.main.temp - 273.15) * 1.80 + 32);\n+                    console.log(temp)\n+\n+                    // lat and lon\n+                    var lat = data.coord.lat;\n+                    var lon = data.coord.lon;\n+                    console.log(lat, lon)\n+                })\n+            }\n+\n+        })\n+\n+\n+\n+}\n+\n+    //2. weather criteria > 80degrees\n+    // function to see if temp in each city is greater than 80, if yes, have different background or some marker\n+\n+\n+\n+var startLocation = {\n+    latLong: { lat: \"\", lng: \"\" },\n+}\n+\n+var cityIndexByDistanceArray = []\n+var cityIndexByTemperatureArray = []\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 4,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    google.maps.event.addListener(map, \"click\", (evt) => {\n+      addMarker(evt.latLng, map);\n+    });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+\n+    \n+}\n+\n+// Adds a marker to the map.\n+function addMarker(location, map) {\n+    // Add the marker at the clicked location, and add the next-available label\n+    // from the array of alphabetical characters.\n+    new google.maps.Marker({\n+      position: location,\n+      label: \"A\",\n+      map: map,\n+    });\n+  }  \n+\n+var getDistance2 = function(){\n+    // initialize services\n+    const geocoder = new google.maps.Geocoder();\n+    const service = new google.maps.DistanceMatrixService();\n+\n+    // build request\n+    const origin1 = { lat: 55.93, lng: -3.118 };\n+    const origin2 = \"Greenwich, England\";\n+    const destinationA = \"Stockholm, Sweden\";\n+    const destinationB = { lat: 50.087, lng: 14.421 };\n+    const request = {\n+        origins: [origin1, origin2],\n+        destinations: [destinationA, destinationB],\n+        travelMode: google.maps.TravelMode.DRIVING,\n+        unitSystem: google.maps.UnitSystem.METRIC,\n+        avoidHighways: false,\n+        avoidTolls: false,\n+    };\n+    \n+    // get distance matrix response\n+    service.getDistanceMatrix(request).then((response) => {\n+        // put response\n+        console.log(JSON.stringify(\n+            response,\n+            null,\n+            2\n+        ));\n+    })\n+}\n+        \n+\n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+\n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n+\n+\n+\n+// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n+                    //user opens page\n+                    //step 1: enter current location, this brings up a modal for step 2\n+                    //step 2: enter date and minimum temperature desired\n+                    //webpage shows:\n+                        // - how many cities are forecasted to meet the weather criteria on the entered date\n+                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n+                        // - offer to run another query\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639321935972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+// SR: I commented these out because they were throwing an error which was causing the map to not load properly\n+// var letsGoBtnEl = $(\"#lets-go-btn\")\n+// var yourCityEl = $(\"#your-city\")\n+// var yourDateEl = $(\"#your-date\")\n+// var tempEl = $(\"#temp\")\n+\n+\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+var sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+// weather forecast call to get 8-day forecast for sixCities array\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+for (var i = 0; i < sixCities.length; i++) {\n+    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + sixCities[i] + \"&appid=\" + APIKey;\n+    fetch(forecast).then(function (response) {\n+        if (response.ok) {\n+            response.json()\n+                .then(function (data) {\n+                    //console.log(data)\n+                    //loop thru day1 to day 8 of forecast\n+                    for (var i = 0; i < 7; i++) {\n+                        //date\n+                        var forecastDay = data.list[i * 8]  //data given in 3hrs,multiply by 8 to get 24 hrs\n+                        var date = new Date(parseInt(forecastDay.dt) * 1000)\n+                        var formatDate = moment(date).format(\"MMM D, YYYY\")\n+                        console.log(forecastDay.dt, \"forecastDay\" + i, date, formatDate)\n+\n+                        //temp\n+                        var temp = Math.round((forecastDay.main.temp - 273.15) * 1.80 + 32);\n+                        console.log(temp)\n+\n+                    }\n+                })\n+        }\n+    })\n+\n+}\n+\n+// compare criteria to the weather\n+//1. what's closest? yourCityEl input compared to sixCities array which contains lon/lat info\n+// get a diff API call to get distance and then sort closest to furthest\n+function getDistance(yourCityEl) {\n+\n+    // query url to make the API call \n+    var queryURL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + yourCityEl + \"&appid=\" + APIKey;\n+\n+    // make a get request to url\n+    fetch(queryURL)\n+        .then(function (response) {\n+            //request successful\n+            if (response.ok) {\n+\n+                response.json().then(function (data) {\n+                    //console.log(data)\n+                    // get date using moment js\n+                    var date = moment().format(\" MM/DD/YYYY\");\n+                    console.log(date)\n+\n+                    // temp in degreeF\n+                    var temp = Math.round((data.main.temp - 273.15) * 1.80 + 32);\n+                    console.log(temp)\n+\n+                    // lat and lon\n+                    var lat = data.coord.lat;\n+                    var lon = data.coord.lon;\n+                    console.log(lat, lon)\n+                })\n+            }\n+\n+        })\n+\n+\n+\n+}\n+\n+    //2. weather criteria > 80degrees\n+    // function to see if temp in each city is greater than 80, if yes, have different background or some marker\n+\n+\n+\n+var startLocation = {\n+    latLong: { lat: \"\", lng: \"\" },\n+}\n+\n+var cityIndexByDistanceArray = []\n+var cityIndexByTemperatureArray = []\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 4,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    google.maps.event.addListener(map, \"click\", (evt) => {\n+      addMarker(evt.latLng, map);\n+    });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+\n+    \n+}\n+\n+// Adds a marker to the map.\n+function addMarker(location, map) {\n+    // Add the marker at the clicked location, and add the next-available label\n+    // from the array of alphabetical characters.\n+    new google.maps.Marker({\n+      position: location,\n+      label: \"A\",\n+      map: map,\n+    });\n+  }  \n+\n+var getDistance2 = function(){\n+    // initialize services\n+    // const geocoder = new google.maps.Geocoder();\n+    const service = new google.maps.DistanceMatrixService();\n+\n+    // build request\n+    const origin1 = { lat: 55.93, lng: -3.118 };\n+    const origin2 = \"Greenwich, England\";\n+    const destinationA = \"Stockholm, Sweden\";\n+    const destinationB = { lat: 50.087, lng: 14.421 };\n+    const request = {\n+        origins: [origin1, origin2],\n+        destinations: [destinationA],\n+        travelMode: google.maps.TravelMode.DRIVING,\n+        unitSystem: google.maps.UnitSystem.METRIC,\n+        avoidHighways: false,\n+        avoidTolls: false,\n+    };\n+    \n+    // get distance matrix response\n+    service.getDistanceMatrix(request).then((response) => {\n+        // put response\n+        console.log(JSON.stringify(\n+            response,\n+            null,\n+            2\n+        ));\n+    })\n+}\n+        \n+\n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+\n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n+\n+\n+\n+// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n+                    //user opens page\n+                    //step 1: enter current location, this brings up a modal for step 2\n+                    //step 2: enter date and minimum temperature desired\n+                    //webpage shows:\n+                        // - how many cities are forecasted to meet the weather criteria on the entered date\n+                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n+                        // - offer to run another query\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639322428464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+// SR: I commented these out because they were throwing an error which was causing the map to not load properly\n+// var letsGoBtnEl = $(\"#lets-go-btn\")\n+// var yourCityEl = $(\"#your-city\")\n+// var yourDateEl = $(\"#your-date\")\n+// var tempEl = $(\"#temp\")\n+\n+\n+\n+\n+var sanFrancisco = {\n+    name: \"San Francisco\",\n+    latLong: { lat: 37.76, lng: -122.45 },\n+    temp: \"\",\n+    distance: \"\",\n+};\n+\n+let saltLakeCity = {\n+    name: \"Salt Lake City\",\n+    latLong: { lat: 40.77, lng: -111.92 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let sanAntonio = {\n+    name: \"San Antonio\",\n+    latLong: { lat: 29.46, lng: -98.57 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let newYork = {\n+    name: \"New York City\",\n+    latLong: { lat: 40.76, lng: -74.00 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let miami = {\n+    name: \"Miami\",\n+    latLong: { lat: 27.77, lng: -80.22 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+let lasVegas = {\n+    name: \"Las Vegas\",\n+    latLong: { lat: 36.14, lng: -115.20 },\n+    temp: \"\",\n+    distance: \"\",\n+}\n+\n+var sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n+\n+// weather forecast call to get 8-day forecast for sixCities array\n+var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n+for (var i = 0; i < sixCities.length; i++) {\n+    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + sixCities[i] + \"&appid=\" + APIKey;\n+    fetch(forecast).then(function (response) {\n+        if (response.ok) {\n+            response.json()\n+                .then(function (data) {\n+                    //console.log(data)\n+                    //loop thru day1 to day 8 of forecast\n+                    for (var i = 0; i < 7; i++) {\n+                        //date\n+                        var forecastDay = data.list[i * 8]  //data given in 3hrs,multiply by 8 to get 24 hrs\n+                        var date = new Date(parseInt(forecastDay.dt) * 1000)\n+                        var formatDate = moment(date).format(\"MMM D, YYYY\")\n+                        console.log(forecastDay.dt, \"forecastDay\" + i, date, formatDate)\n+\n+                        //temp\n+                        var temp = Math.round((forecastDay.main.temp - 273.15) * 1.80 + 32);\n+                        console.log(temp)\n+\n+                    }\n+                })\n+        }\n+    })\n+\n+}\n+\n+// compare criteria to the weather\n+//1. what's closest? yourCityEl input compared to sixCities array which contains lon/lat info\n+// get a diff API call to get distance and then sort closest to furthest\n+function getDistance(yourCityEl) {\n+\n+    // query url to make the API call \n+    var queryURL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + yourCityEl + \"&appid=\" + APIKey;\n+\n+    // make a get request to url\n+    fetch(queryURL)\n+        .then(function (response) {\n+            //request successful\n+            if (response.ok) {\n+\n+                response.json().then(function (data) {\n+                    //console.log(data)\n+                    // get date using moment js\n+                    var date = moment().format(\" MM/DD/YYYY\");\n+                    console.log(date)\n+\n+                    // temp in degreeF\n+                    var temp = Math.round((data.main.temp - 273.15) * 1.80 + 32);\n+                    console.log(temp)\n+\n+                    // lat and lon\n+                    var lat = data.coord.lat;\n+                    var lon = data.coord.lon;\n+                    console.log(lat, lon)\n+                })\n+            }\n+\n+        })\n+\n+\n+\n+}\n+\n+    //2. weather criteria > 80degrees\n+    // function to see if temp in each city is greater than 80, if yes, have different background or some marker\n+\n+\n+\n+var startLocation = {\n+    latLong: { lat: \"\", lng: \"\" },\n+}\n+\n+var cityIndexByDistanceArray = []\n+var cityIndexByTemperatureArray = []\n+\n+function initMap() {\n+    const middle = { lat: 41, lng: -98 };\n+    const map = new google.maps.Map(document.getElementById(\"map\"), {\n+      zoom: 4,\n+      center: middle,\n+    });\n+  \n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        new google.maps.Marker({\n+          position: sixCities[i].latLong,\n+          map: map,\n+        });\n+    }      \n+    // This event listener calls addMarker() when the map is clicked.\n+    google.maps.event.addListener(map, \"click\", (evt) => {\n+      addMarker(evt.latLng, map);\n+    });\n+    // ~~~ keep this event listener, but turn it off after the user clicks the map\n+\n+    \n+}\n+\n+// Adds a marker to the map.\n+function addMarker(location, map) {\n+    // Add the marker at the clicked location, and add the next-available label\n+    // from the array of alphabetical characters.\n+    new google.maps.Marker({\n+      position: location,\n+      label: \"A\",\n+      map: map,\n+    });\n+  }  \n+\n+var getDistance2 = function(){\n+    // initialize services\n+    // const geocoder = new google.maps.Geocoder();\n+    const service = new google.maps.DistanceMatrixService();\n+\n+    // build request\n+    const origin1 = { lat: 27.77, lng: -80.22 };\n+    const origin2 = { lat: 40.76, lng: -74.00 };\n+    const destinationA = \"Chicago, Illinois\";\n+    const destinationB = { lat: 50.087, lng: 14.421 };\n+    const request = {\n+        origins: [origin1, origin2],\n+        destinations: [destinationA],\n+        travelMode: google.maps.TravelMode.DRIVING,\n+        unitSystem: google.maps.UnitSystem.METRIC,\n+        avoidHighways: false,\n+        avoidTolls: false,\n+    };\n+    \n+    // get distance matrix response\n+    service.getDistanceMatrix(request).then((response) => {\n+        // put response\n+        console.log(JSON.stringify(\n+            response,\n+            null,\n+            2\n+        ));\n+    })\n+}\n+        \n+\n+// input \n+// accept click from map \n+    // criteria:\n+    // accepted date \n+        // set up calendar input?\n+        // easier to offer dates?\n+    // accepted minimum temperature\n+    // modal (box on page?)\n+\n+\n+\n+\n+// weather \n+    // get weather for each city on the specified date\n+\n+\n+// local storage\n+    // what is stored / what does it look like?\n+        // travel date / temperature (?) / current date of search (?)\n+\n+\n+\n+// display all(?) data for user to compare / select \n+    // highlight(?) recommended city?\n+    // de-emphasize non-recommended \n+\n+\n+\n+// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n+                    //user opens page\n+                    //step 1: enter current location, this brings up a modal for step 2\n+                    //step 2: enter date and minimum temperature desired\n+                    //webpage shows:\n+                        // - how many cities are forecasted to meet the weather criteria on the entered date\n+                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n+                        // - offer to run another query\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639322608764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n     const destinationA = \"Chicago, Illinois\";\n     const destinationB = { lat: 50.087, lng: 14.421 };\n     const request = {\n         origins: [origin1, origin2],\n-        destinations: [destinationA],\n+        destinations: [destinationA, destinationA],\n         travelMode: google.maps.TravelMode.DRIVING,\n         unitSystem: google.maps.UnitSystem.METRIC,\n         avoidHighways: false,\n         avoidTolls: false,\n@@ -226,1309 +226,5 @@\n                     //step 2: enter date and minimum temperature desired\n                     //webpage shows:\n                         // - how many cities are forecasted to meet the weather criteria on the entered date\n                         // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n-                        // - offer to run another query\n-// SR: I commented these out because they were throwing an error which was causing the map to not load properly\n-// var letsGoBtnEl = $(\"#lets-go-btn\")\n-// var yourCityEl = $(\"#your-city\")\n-// var yourDateEl = $(\"#your-date\")\n-// var tempEl = $(\"#temp\")\n-\n-\n-\n-\n-var sanFrancisco = {\n-    name: \"San Francisco\",\n-    latLong: { lat: 37.76, lng: -122.45 },\n-    temp: \"\",\n-    distance: \"\",\n-};\n-\n-let saltLakeCity = {\n-    name: \"Salt Lake City\",\n-    latLong: { lat: 40.77, lng: -111.92 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let sanAntonio = {\n-    name: \"San Antonio\",\n-    latLong: { lat: 29.46, lng: -98.57 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let newYork = {\n-    name: \"New York City\",\n-    latLong: { lat: 40.76, lng: -74.00 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let miami = {\n-    name: \"Miami\",\n-    latLong: { lat: 27.77, lng: -80.22 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let lasVegas = {\n-    name: \"Las Vegas\",\n-    latLong: { lat: 36.14, lng: -115.20 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-var sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n-\n-// weather forecast call to get 8-day forecast for sixCities array\n-var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n-for (var i = 0; i < sixCities.length; i++) {\n-    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + sixCities[i] + \"&appid=\" + APIKey;\n-    fetch(forecast).then(function (response) {\n-        if (response.ok) {\n-            response.json()\n-                .then(function (data) {\n-                    //console.log(data)\n-                    //loop thru day1 to day 8 of forecast\n-                    for (var i = 0; i < 7; i++) {\n-                        //date\n-                        var forecastDay = data.list[i * 8]  //data given in 3hrs,multiply by 8 to get 24 hrs\n-                        var date = new Date(parseInt(forecastDay.dt) * 1000)\n-                        var formatDate = moment(date).format(\"MMM D, YYYY\")\n-                        console.log(forecastDay.dt, \"forecastDay\" + i, date, formatDate)\n-\n-                        //temp\n-                        var temp = Math.round((forecastDay.main.temp - 273.15) * 1.80 + 32);\n-                        console.log(temp)\n-\n-                    }\n-                })\n-        }\n-    })\n-\n-}\n-\n-// compare criteria to the weather\n-//1. what's closest? yourCityEl input compared to sixCities array which contains lon/lat info\n-// get a diff API call to get distance and then sort closest to furthest\n-function getDistance(yourCityEl) {\n-\n-    // query url to make the API call \n-    var queryURL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + yourCityEl + \"&appid=\" + APIKey;\n-\n-    // make a get request to url\n-    fetch(queryURL)\n-        .then(function (response) {\n-            //request successful\n-            if (response.ok) {\n-\n-                response.json().then(function (data) {\n-                    //console.log(data)\n-                    // get date using moment js\n-                    var date = moment().format(\" MM/DD/YYYY\");\n-                    console.log(date)\n-\n-                    // temp in degreeF\n-                    var temp = Math.round((data.main.temp - 273.15) * 1.80 + 32);\n-                    console.log(temp)\n-\n-                    // lat and lon\n-                    var lat = data.coord.lat;\n-                    var lon = data.coord.lon;\n-                    console.log(lat, lon)\n-                })\n-            }\n-\n-        })\n-\n-\n-\n-}\n-\n-    //2. weather criteria > 80degrees\n-    // function to see if temp in each city is greater than 80, if yes, have different background or some marker\n-\n-\n-\n-var startLocation = {\n-    latLong: { lat: \"\", lng: \"\" },\n-}\n-\n-var cityIndexByDistanceArray = []\n-var cityIndexByTemperatureArray = []\n-\n-function initMap() {\n-    const middle = { lat: 41, lng: -98 };\n-    const map = new google.maps.Map(document.getElementById(\"map\"), {\n-      zoom: 4,\n-      center: middle,\n-    });\n-  \n-    for ( i = 0 ; i < sixCities.length ; i++ ) {\n-        new google.maps.Marker({\n-          position: sixCities[i].latLong,\n-          map: map,\n-        });\n-    }      \n-    // This event listener calls addMarker() when the map is clicked.\n-    google.maps.event.addListener(map, \"click\", (evt) => {\n-      addMarker(evt.latLng, map);\n-    });\n-    // ~~~ keep this event listener, but turn it off after the user clicks the map\n-\n-    \n-}\n-\n-// Adds a marker to the map.\n-function addMarker(location, map) {\n-    // Add the marker at the clicked location, and add the next-available label\n-    // from the array of alphabetical characters.\n-    new google.maps.Marker({\n-      position: location,\n-      label: \"A\",\n-      map: map,\n-    });\n-  }  \n-\n-var getDistance2 = function(){\n-    // initialize services\n-    // const geocoder = new google.maps.Geocoder();\n-    const service = new google.maps.DistanceMatrixService();\n-\n-    // build request\n-    const origin1 = { lat: 55.93, lng: -3.118 };\n-    const origin2 = \"Greenwich, England\";\n-    const destinationA = \"Stockholm, Sweden\";\n-    const destinationB = { lat: 50.087, lng: 14.421 };\n-    const request = {\n-        origins: [origin1, origin2],\n-        destinations: [destinationA],\n-        travelMode: google.maps.TravelMode.DRIVING,\n-        unitSystem: google.maps.UnitSystem.METRIC,\n-        avoidHighways: false,\n-        avoidTolls: false,\n-    };\n-    \n-    // get distance matrix response\n-    service.getDistanceMatrix(request).then((response) => {\n-        // put response\n-        console.log(JSON.stringify(\n-            response,\n-            null,\n-            2\n-        ));\n-    })\n-}\n-        \n-\n-// input \n-// accept click from map \n-    // criteria:\n-    // accepted date \n-        // set up calendar input?\n-        // easier to offer dates?\n-    // accepted minimum temperature\n-    // modal (box on page?)\n-\n-\n-\n-\n-// weather \n-    // get weather for each city on the specified date\n-\n-\n-// local storage\n-    // what is stored / what does it look like?\n-        // travel date / temperature (?) / current date of search (?)\n-\n-\n-\n-// display all(?) data for user to compare / select \n-    // highlight(?) recommended city?\n-    // de-emphasize non-recommended \n-\n-\n-\n-// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n-                    //user opens page\n-                    //step 1: enter current location, this brings up a modal for step 2\n-                    //step 2: enter date and minimum temperature desired\n-                    //webpage shows:\n-                        // - how many cities are forecasted to meet the weather criteria on the entered date\n-                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n-                        // - offer to run another query\n-// SR: I commented these out because they were throwing an error which was causing the map to not load properly\n-// var letsGoBtnEl = $(\"#lets-go-btn\")\n-// var yourCityEl = $(\"#your-city\")\n-// var yourDateEl = $(\"#your-date\")\n-// var tempEl = $(\"#temp\")\n-\n-\n-\n-\n-var sanFrancisco = {\n-    name: \"San Francisco\",\n-    latLong: { lat: 37.76, lng: -122.45 },\n-    temp: \"\",\n-    distance: \"\",\n-};\n-\n-let saltLakeCity = {\n-    name: \"Salt Lake City\",\n-    latLong: { lat: 40.77, lng: -111.92 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let sanAntonio = {\n-    name: \"San Antonio\",\n-    latLong: { lat: 29.46, lng: -98.57 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let newYork = {\n-    name: \"New York City\",\n-    latLong: { lat: 40.76, lng: -74.00 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let miami = {\n-    name: \"Miami\",\n-    latLong: { lat: 27.77, lng: -80.22 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let lasVegas = {\n-    name: \"Las Vegas\",\n-    latLong: { lat: 36.14, lng: -115.20 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-var sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n-\n-// weather forecast call to get 8-day forecast for sixCities array\n-var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n-for (var i = 0; i < sixCities.length; i++) {\n-    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + sixCities[i] + \"&appid=\" + APIKey;\n-    fetch(forecast).then(function (response) {\n-        if (response.ok) {\n-            response.json()\n-                .then(function (data) {\n-                    //console.log(data)\n-                    //loop thru day1 to day 8 of forecast\n-                    for (var i = 0; i < 7; i++) {\n-                        //date\n-                        var forecastDay = data.list[i * 8]  //data given in 3hrs,multiply by 8 to get 24 hrs\n-                        var date = new Date(parseInt(forecastDay.dt) * 1000)\n-                        var formatDate = moment(date).format(\"MMM D, YYYY\")\n-                        console.log(forecastDay.dt, \"forecastDay\" + i, date, formatDate)\n-\n-                        //temp\n-                        var temp = Math.round((forecastDay.main.temp - 273.15) * 1.80 + 32);\n-                        console.log(temp)\n-\n-                    }\n-                })\n-        }\n-    })\n-\n-}\n-\n-// compare criteria to the weather\n-//1. what's closest? yourCityEl input compared to sixCities array which contains lon/lat info\n-// get a diff API call to get distance and then sort closest to furthest\n-function getDistance(yourCityEl) {\n-\n-    // query url to make the API call \n-    var queryURL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + yourCityEl + \"&appid=\" + APIKey;\n-\n-    // make a get request to url\n-    fetch(queryURL)\n-        .then(function (response) {\n-            //request successful\n-            if (response.ok) {\n-\n-                response.json().then(function (data) {\n-                    //console.log(data)\n-                    // get date using moment js\n-                    var date = moment().format(\" MM/DD/YYYY\");\n-                    console.log(date)\n-\n-                    // temp in degreeF\n-                    var temp = Math.round((data.main.temp - 273.15) * 1.80 + 32);\n-                    console.log(temp)\n-\n-                    // lat and lon\n-                    var lat = data.coord.lat;\n-                    var lon = data.coord.lon;\n-                    console.log(lat, lon)\n-                })\n-            }\n-\n-        })\n-\n-\n-\n-}\n-\n-    //2. weather criteria > 80degrees\n-    // function to see if temp in each city is greater than 80, if yes, have different background or some marker\n-\n-\n-\n-var startLocation = {\n-    latLong: { lat: \"\", lng: \"\" },\n-}\n-\n-var cityIndexByDistanceArray = []\n-var cityIndexByTemperatureArray = []\n-\n-function initMap() {\n-    const middle = { lat: 41, lng: -98 };\n-    const map = new google.maps.Map(document.getElementById(\"map\"), {\n-      zoom: 4,\n-      center: middle,\n-    });\n-  \n-    for ( i = 0 ; i < sixCities.length ; i++ ) {\n-        new google.maps.Marker({\n-          position: sixCities[i].latLong,\n-          map: map,\n-        });\n-    }      \n-    // This event listener calls addMarker() when the map is clicked.\n-    google.maps.event.addListener(map, \"click\", (evt) => {\n-      addMarker(evt.latLng, map);\n-    });\n-    // ~~~ keep this event listener, but turn it off after the user clicks the map\n-\n-    \n-}\n-\n-// Adds a marker to the map.\n-function addMarker(location, map) {\n-    // Add the marker at the clicked location, and add the next-available label\n-    // from the array of alphabetical characters.\n-    new google.maps.Marker({\n-      position: location,\n-      label: \"A\",\n-      map: map,\n-    });\n-  }  \n-\n-var getDistance2 = function(){\n-    // initialize services\n-    const geocoder = new google.maps.Geocoder();\n-    const service = new google.maps.DistanceMatrixService();\n-\n-    // build request\n-    const origin1 = { lat: 55.93, lng: -3.118 };\n-    const origin2 = \"Greenwich, England\";\n-    const destinationA = \"Stockholm, Sweden\";\n-    const destinationB = { lat: 50.087, lng: 14.421 };\n-    const request = {\n-        origins: [origin1, origin2],\n-        destinations: [destinationA, destinationB],\n-        travelMode: google.maps.TravelMode.DRIVING,\n-        unitSystem: google.maps.UnitSystem.METRIC,\n-        avoidHighways: false,\n-        avoidTolls: false,\n-    };\n-    \n-    // get distance matrix response\n-    service.getDistanceMatrix(request).then((response) => {\n-        // put response\n-        console.log(JSON.stringify(\n-            response,\n-            null,\n-            2\n-        ));\n-    })\n-}\n-        \n-\n-// input \n-// accept click from map \n-    // criteria:\n-    // accepted date \n-        // set up calendar input?\n-        // easier to offer dates?\n-    // accepted minimum temperature\n-    // modal (box on page?)\n-\n-\n-\n-\n-// weather \n-    // get weather for each city on the specified date\n-\n-\n-// local storage\n-    // what is stored / what does it look like?\n-        // travel date / temperature (?) / current date of search (?)\n-\n-\n-\n-// display all(?) data for user to compare / select \n-    // highlight(?) recommended city?\n-    // de-emphasize non-recommended \n-\n-\n-\n-// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n-                    //user opens page\n-                    //step 1: enter current location, this brings up a modal for step 2\n-                    //step 2: enter date and minimum temperature desired\n-                    //webpage shows:\n-                        // - how many cities are forecasted to meet the weather criteria on the entered date\n-                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n-                        // - offer to run another query\n-// SR: I commented these out because they were throwing an error which was causing the map to not load properly\n-// var letsGoBtnEl = $(\"#lets-go-btn\")\n-// var yourCityEl = $(\"#your-city\")\n-// var yourDateEl = $(\"#your-date\")\n-// var tempEl = $(\"#temp\")\n-\n-\n-\n-\n-var sanFrancisco = {\n-    name: \"San Francisco\",\n-    latLong: { lat: 37.76, lng: -122.45 },\n-    temp: \"\",\n-    distance: \"\",\n-};\n-\n-let saltLakeCity = {\n-    name: \"Salt Lake City\",\n-    latLong: { lat: 40.77, lng: -111.92 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let sanAntonio = {\n-    name: \"San Antonio\",\n-    latLong: { lat: 29.46, lng: -98.57 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let newYork = {\n-    name: \"New York City\",\n-    latLong: { lat: 40.76, lng: -74.00 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let miami = {\n-    name: \"Miami\",\n-    latLong: { lat: 27.77, lng: -80.22 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let lasVegas = {\n-    name: \"Las Vegas\",\n-    latLong: { lat: 36.14, lng: -115.20 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-var sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n-\n-// weather forecast call to get 8-day forecast for sixCities array\n-var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n-for (var i = 0; i < sixCities.length; i++) {\n-    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + sixCities[i] + \"&appid=\" + APIKey;\n-    fetch(forecast).then(function (response) {\n-        if (response.ok) {\n-            response.json()\n-                .then(function (data) {\n-                    //console.log(data)\n-                    //loop thru day1 to day 8 of forecast\n-                    for (var i = 0; i < 7; i++) {\n-                        //date\n-                        var forecastDay = data.list[i * 8]  //data given in 3hrs,multiply by 8 to get 24 hrs\n-                        var date = new Date(parseInt(forecastDay.dt) * 1000)\n-                        var formatDate = moment(date).format(\"MMM D, YYYY\")\n-                        console.log(forecastDay.dt, \"forecastDay\" + i, date, formatDate)\n-\n-                        //temp\n-                        var temp = Math.round((forecastDay.main.temp - 273.15) * 1.80 + 32);\n-                        console.log(temp)\n-\n-                    }\n-                })\n-        }\n-    })\n-\n-}\n-\n-// compare criteria to the weather\n-//1. what's closest? yourCityEl input compared to sixCities array which contains lon/lat info\n-// get a diff API call to get distance and then sort closest to furthest\n-function getDistance(yourCityEl) {\n-\n-    // query url to make the API call \n-    var queryURL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + yourCityEl + \"&appid=\" + APIKey;\n-\n-    // make a get request to url\n-    fetch(queryURL)\n-        .then(function (response) {\n-            //request successful\n-            if (response.ok) {\n-\n-                response.json().then(function (data) {\n-                    //console.log(data)\n-                    // get date using moment js\n-                    var date = moment().format(\" MM/DD/YYYY\");\n-                    console.log(date)\n-\n-                    // temp in degreeF\n-                    var temp = Math.round((data.main.temp - 273.15) * 1.80 + 32);\n-                    console.log(temp)\n-\n-                    // lat and lon\n-                    var lat = data.coord.lat;\n-                    var lon = data.coord.lon;\n-                    console.log(lat, lon)\n-                })\n-            }\n-\n-        })\n-\n-\n-\n-}\n-\n-    //2. weather criteria > 80degrees\n-    // function to see if temp in each city is greater than 80, if yes, have different background or some marker\n-\n-\n-\n-var startLocation = {\n-    latLong: { lat: \"\", lng: \"\" },\n-}\n-\n-var cityIndexByDistanceArray = []\n-var cityIndexByTemperatureArray = []\n-\n-function initMap() {\n-    const middle = { lat: 41, lng: -98 };\n-    const map = new google.maps.Map(document.getElementById(\"map\"), {\n-      zoom: 4,\n-      center: middle,\n-    });\n-  \n-    for ( i = 0 ; i < sixCities.length ; i++ ) {\n-        new google.maps.Marker({\n-          position: sixCities[i].latLong,\n-          map: map,\n-        });\n-    }      \n-    // This event listener calls addMarker() when the map is clicked.\n-    google.maps.event.addListener(map, \"click\", (evt) => {\n-      addMarker(evt.latLng, map);\n-    });\n-    // ~~~ keep this event listener, but turn it off after the user clicks the map\n-\n-    // initialize services\n-    const geocoder = new google.maps.Geocoder();\n-    const service = new google.maps.DistanceMatrixService();\n-\n-}\n-\n-// Adds a marker to the map.\n-function addMarker(location, map) {\n-    // Add the marker at the clicked location, and add the next-available label\n-    // from the array of alphabetical characters.\n-    new google.maps.Marker({\n-      position: location,\n-      label: \"A\",\n-      map: map,\n-    });\n-  }  \n-\n-var getDistance2 = function(){\n-    \n-    // build request\n-    const origin1 = { lat: 55.93, lng: -3.118 };\n-    const origin2 = \"Greenwich, England\";\n-    const destinationA = \"Stockholm, Sweden\";\n-    const destinationB = { lat: 50.087, lng: 14.421 };\n-    const request = {\n-        origins: [origin1, origin2],\n-        destinations: [destinationA, destinationB],\n-        travelMode: google.maps.TravelMode.DRIVING,\n-        unitSystem: google.maps.UnitSystem.METRIC,\n-        avoidHighways: false,\n-        avoidTolls: false,\n-    };\n-    \n-    // get distance matrix response\n-    service.getDistanceMatrix(request).then((response) => {\n-        // put response\n-        console.log(JSON.stringify(\n-            response,\n-            null,\n-            2\n-        ));\n-    })\n-}\n-        \n-\n-// input \n-// accept click from map \n-    // criteria:\n-    // accepted date \n-        // set up calendar input?\n-        // easier to offer dates?\n-    // accepted minimum temperature\n-    // modal (box on page?)\n-\n-\n-\n-\n-// weather \n-    // get weather for each city on the specified date\n-\n-\n-// local storage\n-    // what is stored / what does it look like?\n-        // travel date / temperature (?) / current date of search (?)\n-\n-\n-\n-// display all(?) data for user to compare / select \n-    // highlight(?) recommended city?\n-    // de-emphasize non-recommended \n-\n-\n-\n-// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n-                    //user opens page\n-                    //step 1: enter current location, this brings up a modal for step 2\n-                    //step 2: enter date and minimum temperature desired\n-                    //webpage shows:\n-                        // - how many cities are forecasted to meet the weather criteria on the entered date\n-                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n-                        // - offer to run another query\n-// SR: I commented these out because they were throwing an error which was causing the map to not load properly\n-// var letsGoBtnEl = $(\"#lets-go-btn\")\n-// var yourCityEl = $(\"#your-city\")\n-// var yourDateEl = $(\"#your-date\")\n-// var tempEl = $(\"#temp\")\n-\n-\n-\n-\n-var sanFrancisco = {\n-    name: \"San Francisco\",\n-    latLong: { lat: 37.76, lng: -122.45 },\n-    temp: \"\",\n-    distance: \"\",\n-};\n-\n-let saltLakeCity = {\n-    name: \"Salt Lake City\",\n-    latLong: { lat: 40.77, lng: -111.92 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let sanAntonio = {\n-    name: \"San Antonio\",\n-    latLong: { lat: 29.46, lng: -98.57 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let newYork = {\n-    name: \"New York City\",\n-    latLong: { lat: 40.76, lng: -74.00 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let miami = {\n-    name: \"Miami\",\n-    latLong: { lat: 27.77, lng: -80.22 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let lasVegas = {\n-    name: \"Las Vegas\",\n-    latLong: { lat: 36.14, lng: -115.20 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-var sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n-\n-// weather forecast call to get 8-day forecast for sixCities array\n-var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n-for (var i = 0; i < sixCities.length; i++) {\n-    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + sixCities[i] + \"&appid=\" + APIKey;\n-    fetch(forecast).then(function (response) {\n-        if (response.ok) {\n-            response.json()\n-                .then(function (data) {\n-                    //console.log(data)\n-                    //loop thru day1 to day 8 of forecast\n-                    for (var i = 0; i < 7; i++) {\n-                        //date\n-                        var forecastDay = data.list[i * 8]  //data given in 3hrs,multiply by 8 to get 24 hrs\n-                        var date = new Date(parseInt(forecastDay.dt) * 1000)\n-                        var formatDate = moment(date).format(\"MMM D, YYYY\")\n-                        console.log(forecastDay.dt, \"forecastDay\" + i, date, formatDate)\n-\n-                        //temp\n-                        var temp = Math.round((forecastDay.main.temp - 273.15) * 1.80 + 32);\n-                        console.log(temp)\n-\n-                    }\n-                })\n-        }\n-    })\n-\n-}\n-\n-// compare criteria to the weather\n-//1. what's closest? yourCityEl input compared to sixCities array which contains lon/lat info\n-// get a diff API call to get distance and then sort closest to furthest\n-function getDistance(yourCityEl) {\n-\n-    // query url to make the API call \n-    var queryURL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + yourCityEl + \"&appid=\" + APIKey;\n-\n-    // make a get request to url\n-    fetch(queryURL)\n-        .then(function (response) {\n-            //request successful\n-            if (response.ok) {\n-\n-                response.json().then(function (data) {\n-                    //console.log(data)\n-                    // get date using moment js\n-                    var date = moment().format(\" MM/DD/YYYY\");\n-                    console.log(date)\n-\n-                    // temp in degreeF\n-                    var temp = Math.round((data.main.temp - 273.15) * 1.80 + 32);\n-                    console.log(temp)\n-\n-                    // lat and lon\n-                    var lat = data.coord.lat;\n-                    var lon = data.coord.lon;\n-                    console.log(lat, lon)\n-                })\n-            }\n-\n-        })\n-\n-\n-\n-}\n-\n-    //2. weather criteria > 80degrees\n-    // function to see if temp in each city is greater than 80, if yes, have different background or some marker\n-\n-\n-\n-var startLocation = {\n-    latLong: { lat: \"\", lng: \"\" },\n-}\n-\n-var cityIndexByDistanceArray = []\n-var cityIndexByTemperatureArray = []\n-\n-function initMap() {\n-    const middle = { lat: 41, lng: -98 };\n-    const map = new google.maps.Map(document.getElementById(\"map\"), {\n-      zoom: 4,\n-      center: middle,\n-    });\n-  \n-    for ( i = 0 ; i < sixCities.length ; i++ ) {\n-        new google.maps.Marker({\n-          position: sixCities[i].latLong,\n-          map: map,\n-        });\n-    }      \n-    // This event listener calls addMarker() when the map is clicked.\n-    google.maps.event.addListener(map, \"click\", (evt) => {\n-      addMarker(evt.latLng, map);\n-    });\n-    // ~~~ keep this event listener, but turn it off after the user clicks the map\n-\n-    // initialize services\n-    const geocoder = new google.maps.Geocoder();\n-    const service = new google.maps.DistanceMatrixService();\n-\n-}\n-\n-// Adds a marker to the map.\n-function addMarker(location, map) {\n-    // Add the marker at the clicked location, and add the next-available label\n-    // from the array of alphabetical characters.\n-    new google.maps.Marker({\n-      position: location,\n-      label: \"A\",\n-      map: map,\n-    });\n-  }  \n-\n-// initialize services\n-const geocoder = new google.maps.Geocoder();\n-const service = new google.maps.DistanceMatrixService();\n-// build request\n-const origin1 = { lat: 55.93, lng: -3.118 };\n-const origin2 = \"Greenwich, England\";\n-const destinationA = \"Stockholm, Sweden\";\n-const destinationB = { lat: 50.087, lng: 14.421 };\n-const request = {\n-  origins: [origin1, origin2],\n-  destinations: [destinationA, destinationB],\n-  travelMode: google.maps.TravelMode.DRIVING,\n-  unitSystem: google.maps.UnitSystem.METRIC,\n-  avoidHighways: false,\n-  avoidTolls: false,\n-};\n-\n-// get distance matrix response\n-service.getDistanceMatrix(request).then((response) => {\n-  // put response\n-  document.getElementById(\"response\").innerText = JSON.stringify(\n-    response,\n-    null,\n-    2\n-  );\n-\n-// input \n-// accept click from map \n-    // criteria:\n-    // accepted date \n-        // set up calendar input?\n-        // easier to offer dates?\n-    // accepted minimum temperature\n-    // modal (box on page?)\n-\n-\n-\n-\n-// weather \n-    // get weather for each city on the specified date\n-\n-\n-// local storage\n-    // what is stored / what does it look like?\n-        // travel date / temperature (?) / current date of search (?)\n-\n-\n-\n-// display all(?) data for user to compare / select \n-    // highlight(?) recommended city?\n-    // de-emphasize non-recommended \n-\n-\n-\n-// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n-                    //user opens page\n-                    //step 1: enter current location, this brings up a modal for step 2\n-                    //step 2: enter date and minimum temperature desired\n-                    //webpage shows:\n-                        // - how many cities are forecasted to meet the weather criteria on the entered date\n-                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n-                        // - offer to run another query\n-// SR: I commented these out because they were throwing an error which was causing the map to not load properly\n-// var letsGoBtnEl = $(\"#lets-go-btn\")\n-// var yourCityEl = $(\"#your-city\")\n-// var yourDateEl = $(\"#your-date\")\n-// var tempEl = $(\"#temp\")\n-\n-\n-\n-\n-var sanFrancisco = {\n-    name: \"San Francisco\",\n-    latLong: { lat: 37.76, lng: -122.45 },\n-    temp: \"\",\n-    distance: \"\",\n-};\n-\n-let saltLakeCity = {\n-    name: \"Salt Lake City\",\n-    latLong: { lat: 40.77, lng: -111.92 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let sanAntonio = {\n-    name: \"San Antonio\",\n-    latLong: { lat: 29.46, lng: -98.57 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let newYork = {\n-    name: \"New York City\",\n-    latLong: { lat: 40.76, lng: -74.00 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let miami = {\n-    name: \"Miami\",\n-    latLong: { lat: 27.77, lng: -80.22 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let lasVegas = {\n-    name: \"Las Vegas\",\n-    latLong: { lat: 36.14, lng: -115.20 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-var sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n-\n-// weather forecast call to get 8-day forecast for sixCities array\n-var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n-for (var i = 0; i < sixCities.length; i++) {\n-    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + sixCities[i] + \"&appid=\" + APIKey;\n-    fetch(forecast).then(function (response) {\n-        if (response.ok) {\n-            response.json()\n-                .then(function (data) {\n-                    //console.log(data)\n-                    //loop thru day1 to day 8 of forecast\n-                    for (var i = 0; i < 7; i++) {\n-                        //date\n-                        var forecastDay = data.list[i * 8]  //data given in 3hrs,multiply by 8 to get 24 hrs\n-                        var date = new Date(parseInt(forecastDay.dt) * 1000)\n-                        var formatDate = moment(date).format(\"MMM D, YYYY\")\n-                        console.log(forecastDay.dt, \"forecastDay\" + i, date, formatDate)\n-\n-                        //temp\n-                        var temp = Math.round((forecastDay.main.temp - 273.15) * 1.80 + 32);\n-                        console.log(temp)\n-\n-                    }\n-                })\n-        }\n-    })\n-\n-}\n-\n-// compare criteria to the weather\n-//1. what's closest? yourCityEl input compared to sixCities array which contains lon/lat info\n-// get a diff API call to get distance and then sort closest to furthest\n-function getDistance(yourCityEl) {\n-\n-    // query url to make the API call \n-    var queryURL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + yourCityEl + \"&appid=\" + APIKey;\n-\n-    // make a get request to url\n-    fetch(queryURL)\n-        .then(function (response) {\n-            //request successful\n-            if (response.ok) {\n-\n-                response.json().then(function (data) {\n-                    //console.log(data)\n-                    // get date using moment js\n-                    var date = moment().format(\" MM/DD/YYYY\");\n-                    console.log(date)\n-\n-                    // temp in degreeF\n-                    var temp = Math.round((data.main.temp - 273.15) * 1.80 + 32);\n-                    console.log(temp)\n-\n-                    // lat and lon\n-                    var lat = data.coord.lat;\n-                    var lon = data.coord.lon;\n-                    console.log(lat, lon)\n-                })\n-            }\n-\n-        })\n-\n-\n-\n-}\n-\n-    //2. weather criteria > 80degrees\n-    // function to see if temp in each city is greater than 80, if yes, have different background or some marker\n-\n-\n-\n-var startLocation = {\n-    latLong: { lat: \"\", lng: \"\" },\n-}\n-\n-var cityIndexByDistanceArray = []\n-var cityIndexByTemperatureArray = []\n-\n-function initMap() {\n-    const middle = { lat: 41, lng: -98 };\n-    const map = new google.maps.Map(document.getElementById(\"map\"), {\n-      zoom: 4,\n-      center: middle,\n-    });\n-  \n-    for ( i = 0 ; i < sixCities.length ; i++ ) {\n-        new google.maps.Marker({\n-          position: sixCities[i].latLong,\n-          map: map,\n-        });\n-    }      \n-    // This event listener calls addMarker() when the map is clicked.\n-    google.maps.event.addListener(map, \"click\", (evt) => {\n-      addMarker(evt.latLng, map);\n-    });\n-    // ~~~ keep this event listener, but turn it off after the user clicks the map\n-    \n-}\n-\n-// Adds a marker to the map.\n-function addMarker(location, map) {\n-    // Add the marker at the clicked location, and add the next-available label\n-    // from the array of alphabetical characters.\n-    new google.maps.Marker({\n-      position: location,\n-      label: \"A\",\n-      map: map,\n-    });\n-  }  \n-\n-\n-// input \n-// accept click from map \n-    // criteria:\n-    // accepted date \n-        // set up calendar input?\n-        // easier to offer dates?\n-    // accepted minimum temperature\n-    // modal (box on page?)\n-\n-\n-\n-\n-// weather \n-    // get weather for each city on the specified date\n-\n-\n-// local storage\n-    // what is stored / what does it look like?\n-        // travel date / temperature (?) / current date of search (?)\n-\n-\n-\n-// display all(?) data for user to compare / select \n-    // highlight(?) recommended city?\n-    // de-emphasize non-recommended \n-\n-\n-\n-// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n-                    //user opens page\n-                    //step 1: enter current location, this brings up a modal for step 2\n-                    //step 2: enter date and minimum temperature desired\n-                    //webpage shows:\n-                        // - how many cities are forecasted to meet the weather criteria on the entered date\n-                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n-                        // - offer to run another query\n-// SR: I commented these out because they were throwing an error which was causing the map to not load properly\n-// var letsGoBtnEl = $(\"#lets-go-btn\")\n-// var yourCityEl = $(\"#your-city\")\n-// var yourDateEl = $(\"#your-date\")\n-// var tempEl = $(\"#temp\")\n-\n-\n-\n-\n-var sanFrancisco = {\n-    name: \"San Francisco\",\n-    latLong: { lat: 37.76, lng: -122.45 },\n-    temp: \"\",\n-    distance: \"\",\n-};\n-\n-let saltLakeCity = {\n-    name: \"Salt Lake City\",\n-    latLong: { lat: 40.77, lng: -111.92 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let sanAntonio = {\n-    name: \"San Antonio\",\n-    latLong: { lat: 29.46, lng: -98.57 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let newYork = {\n-    name: \"New York City\",\n-    latLong: { lat: 40.76, lng: -74.00 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let miami = {\n-    name: \"Miami\",\n-    latLong: { lat: 27.77, lng: -80.22 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-let lasVegas = {\n-    name: \"Las Vegas\",\n-    latLong: { lat: 36.14, lng: -115.20 },\n-    temp: \"\",\n-    distance: \"\",\n-}\n-\n-var sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n-\n-// weather forecast call to get 8-day forecast for sixCities array\n-var APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n-for (var i = 0; i < sixCities.length; i++) {\n-    var forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + sixCities[i] + \"&appid=\" + APIKey;\n-    fetch(forecast).then(function (response) {\n-        if (response.ok) {\n-            response.json()\n-                .then(function (data) {\n-                    //console.log(data)\n-                    //loop thru day1 to day 8 of forecast\n-                    for (var i = 0; i < 7; i++) {\n-                        //date\n-                        var forecastDay = data.list[i * 8]  //data given in 3hrs,multiply by 8 to get 24 hrs\n-                        var date = new Date(parseInt(forecastDay.dt) * 1000)\n-                        var formatDate = moment(date).format(\"MMM D, YYYY\")\n-                        console.log(forecastDay.dt, \"forecastDay\" + i, date, formatDate)\n-\n-                        //temp\n-                        var temp = Math.round((forecastDay.main.temp - 273.15) * 1.80 + 32);\n-                        console.log(temp)\n-\n-                    }\n-                })\n-        }\n-    })\n-\n-}\n-\n-// compare criteria to the weather\n-//1. what's closest? yourCityEl input compared to sixCities array which contains lon/lat info\n-// get a diff API call to get distance and then sort closest to furthest\n-function getDistance(yourCityEl) {\n-\n-    // query url to make the API call \n-    var queryURL = \"http://api.openweathermap.org/data/2.5/weather?q=\" + yourCityEl + \"&appid=\" + APIKey;\n-\n-    // make a get request to url\n-    fetch(queryURL)\n-        .then(function (response) {\n-            //request successful\n-            if (response.ok) {\n-\n-                response.json().then(function (data) {\n-                    //console.log(data)\n-                    // get date using moment js\n-                    var date = moment().format(\" MM/DD/YYYY\");\n-                    console.log(date)\n-\n-                    // temp in degreeF\n-                    var temp = Math.round((data.main.temp - 273.15) * 1.80 + 32);\n-                    console.log(temp)\n-\n-                    // lat and lon\n-                    var lat = data.coord.lat;\n-                    var lon = data.coord.lon;\n-                    console.log(lat, lon)\n-                })\n-            }\n-\n-        })\n-\n-\n-\n-}\n-\n-    //2. weather criteria > 80degrees\n-    // function to see if temp in each city is greater than 80, if yes, have different background or some marker\n-\n-\n-\n-var startLocation = {\n-    latLong: { lat: \"\", lng: \"\" },\n-}\n-\n-var cityIndexByDistanceArray = []\n-var cityIndexByTemperatureArray = []\n-\n-function initMap() {\n-    const middle = { lat: 41, lng: -98 };\n-    const map = new google.maps.Map(document.getElementById(\"map\"), {\n-      zoom: 4,\n-      center: middle,\n-    });\n-  \n-    for ( i = 0 ; i < sixCities.length ; i++ ) {\n-        new google.maps.Marker({\n-          position: sixCities[i].latLong,\n-          map: map,\n-        });\n-    }      \n-    // This event listener calls addMarker() when the map is clicked.\n-    // google.maps.event.addListener(map, \"click\", (evt) => {\n-    //   addMarker(evt.latLng, map);\n-    // });\n-    // ~~~ keep this event listener, but turn it off after the user clicks the map\n-    \n-  }\n-  \n-// input \n-// accept click from map \n-    // criteria:\n-    // accepted date \n-        // set up calendar input?\n-        // easier to offer dates?\n-    // accepted minimum temperature\n-    // modal (box on page?)\n-\n-\n-\n-\n-// weather \n-    // get weather for each city on the specified date\n-\n-\n-// local storage\n-    // what is stored / what does it look like?\n-        // travel date / temperature (?) / current date of search (?)\n-\n-\n-\n-// display all(?) data for user to compare / select \n-    // highlight(?) recommended city?\n-    // de-emphasize non-recommended \n-\n-\n-\n-// DAVID AND JOANNE: DOES THIS PROCESS MAKE SENSE FOR USER EXPERIENCE?\n-                    //user opens page\n-                    //step 1: enter current location, this brings up a modal for step 2\n-                    //step 2: enter date and minimum temperature desired\n-                    //webpage shows:\n-                        // - how many cities are forecasted to meet the weather criteria on the entered date\n-                        // - cities that meet the criteria in order of distance (cities that don't meet the criteria aren't shown; if no city meets the criteria, no cities are shown and user receives message \"no cities meet your criteria on the date selected\")\n                         // - offer to run another query\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639323291826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,15 +166,19 @@\n     // const geocoder = new google.maps.Geocoder();\n     const service = new google.maps.DistanceMatrixService();\n \n     // build request\n-    const origin1 = { lat: 27.77, lng: -80.22 };\n-    const origin2 = { lat: 40.76, lng: -74.00 };\n-    const destinationA = \"Chicago, Illinois\";\n-    const destinationB = { lat: 50.087, lng: 14.421 };\n+    const chicagoString = \"Chicago, Illinois\";\n+    var originLocationsArray = [];\n+    var destinationLocationsArray = [];\n+    for ( i = 0 ; i < sixCities.length ; i++ ) {\n+        originLocationsArray[i] = sixCities[i].latLong;\n+        destinationLocationsArray[i] = chicagoString;\n+    }\n+    console.log(originLocationsArray);\n     const request = {\n-        origins: [origin1, origin2],\n-        destinations: [destinationA, destinationA],\n+        origins: originLocationsArray,\n+        destinations: destinationLocationsArray,\n         travelMode: google.maps.TravelMode.DRIVING,\n         unitSystem: google.maps.UnitSystem.METRIC,\n         avoidHighways: false,\n         avoidTolls: false,\n"
                },
                {
                    "date": 1639323848122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,8 +191,9 @@\n             response,\n             null,\n             2\n         ));\n+        console.log(response);\n     })\n }\n         \n \n"
                },
                {
                    "date": 1639324273675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,11 +169,12 @@\n     // build request\n     const chicagoString = \"Chicago, Illinois\";\n     var originLocationsArray = [];\n     var destinationLocationsArray = [];\n+    destinationLocationsArray[0] = chicagoString;\n     for ( i = 0 ; i < sixCities.length ; i++ ) {\n         originLocationsArray[i] = sixCities[i].latLong;\n-        destinationLocationsArray[i] = chicagoString;\n+        // destinationLocationsArray[i] = chicagoString;\n     }\n     console.log(originLocationsArray);\n     const request = {\n         origins: originLocationsArray,\n"
                },
                {
                    "date": 1639324624709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n }\n \n let miami = {\n     name: \"Miami\",\n-    latLong: { lat: 27.77, lng: -80.22 },\n+    latLong: { lat: 25.77, lng: -80.26 },\n     temp: \"\",\n     distance: \"\",\n }\n \n"
                },
                {
                    "date": 1639325279561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,8 +193,13 @@\n             null,\n             2\n         ));\n         console.log(response);\n+        var receivedDistanceInformation = response;\n+        console.log(receivedDistanceInformation);\n+        for ( i = 0 ; i < sixCities.length ; i++ ) {\n+            sixCities[0].distance = receivedDistanceInformation.rows[i].elements[0].distance;\n+        }\n     })\n }\n         \n \n"
                }
            ],
            "date": 1639110074774,
            "name": "Commit-0",
            "content": "// weather forecast call\nvar APIKey = \"be713046da2f1520bb5a2702cd2e8948\";\n//  https://openweathermap.org/data/2.5/onecall?lon={lon}&lat={lat}...&exclude=minutely,hourly..&appid={apikey}\n\n\nvar sanFrancisco = {\n    name: \"San Francisco\",\n    latLong: { lat: 37.76, lng: -122.45 },\n    temp: \"\",\n};\n\nlet saltLakeCity = {\n    name: \"Salt Lake City\",\n    latLong: { lat: 40.77, lng: -111.92 },\n    temp: \"\"\n}\n\nlet sanAntonio = {\n    name: \"San Antonio\",\n    latLong: { lat: 29.46, lng: -98.57 },\n    temp: \"\"\n}\n\nlet newYork = {\n    name: \"New York City\",\n    latLong: { lat: 40.76, lng: -74.00 },\n    temp: \"\"\n}\n\nlet miami = {\n    name: \"Miami\",\n    latLong: { lat: 27.77, lng: -80.22 },\n    temp: \"\"\n}\n\nlet lasVegas = {\n    name: \"Las Vegas\",\n    latLong: { lat: 36.14, lng: -115.20 },\n    temp: \"\"\n}\n\nlet sixCities = [sanFrancisco, saltLakeCity, sanAntonio, newYork, miami, lasVegas]\n\n\n// input \n// accept click from map \n    // criteria:\n    // accepted date \n    // accepted minimum temperature\n    // modal (box on page?)\n\n\n// weather \n    // cities into array -- \n        // name: San Francisco,\n            // longitude: \"\",\n            // latitude: \"\",\n        // Salt Late City\n        // San Antonio\n        // New York\n        // Miami \n        // Las Vegas \n\n\n// local storage\n    // what is stored / what does it look like?\n        // travel date / temperature (?) / current date of search (?)\n\n// compare criteria to the weather\n    // what's closest?\n    // distance()\n    // weather \n\n// display all(?) data for user to compare / select \n    // highlight(?) recommended city?\n    // de-emphasize non-recommended "
        }
    ]
}